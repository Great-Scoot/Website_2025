== SETUP ==
Initialize or clone git repo (use HTTPS if SSH doesn't work), create .gitignore

Install Postgres, Python, Nodejs

Setup Postgres database

Create secret.env (public.env part of repo)
Update .gitignore

python3 -m venv venv
sudo chown -R $USER:$USER /app/Website_2025/venv (Ubuntu only)
source venv/Scripts/activate (or "source venv/bin/activate" or ". venv/bin/activate" - use bash)

pip install django django-appconf django-cors-headers djangorestframework django-debug-toolbar django-filter djoser python-dotenv django-environ bleach gunicorn psycopg[binary]
pip freeze > requirements.txt (or pip install -r requirements.txt)

django-admin startproject [PROJECT-NAME]
cd [PROJECT-NAME]
python manage.py startapp [APP-NAME]

Update settings.py
python manage.py makemigrations
python manage.py migrate

cd ../

npm init (creates package.json)
Create frontend directory (outside of backend directory) with source, and public subdirectories

Work on project level urls.py and views.py
Work on app level urls.py and views.py
Create static and template directories
Update settings.py 

Commit
Workflow stuff (dev -> prod)
Continue developing...

== CI/CD ==

-- Before Commit --
Update ENV_WEBSITE_VERSION
npm run webpack:prod

-- Commit/Merge --
Commit to development, merge with master
    - git switch master
    - git merge development
    - Resolve any conflicts & commit to master (or just sync changes)

-- Update Prod Server --
SSH to server
bash actions/update.sh
    - cd /actions, chmod +x *.sh

-- Clean --
bash /app/Website_2025/actions/clean.sh

-- Test --
Use x_bypass_maintenance header
Disable Django maintenance_mode when done.

-- Before further dev --
git switch development

== GIT ==

-- SSH --
mkdir -p ~/.ssh
ssh-keygen -t ed25519 -C "your_email@example.com"
eval $(ssh-agent -s)
ssh-add ~/.ssh/id_ed25519
cat ~/.ssh/id_ed25519.pub
Add key to GitHub (GitHub → Settings → SSH and GPG keys → New SSH key)
git clone git@github.com:[PATH-TO-REPO]

-- secret.env --
mv temp/secret.env [PROJECT-DIRECTORY]/
rm -r temp

-- NGINX conf --
mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.backup
cp /app/Website_2025/nginx/docker.nginx.conf /etc/nginx/conf.d

-- GUnicorn logging --
mkdir /var/log/gunicorn

-- Checking out/Rolling back --
git status
git reset --hard
git clean -df
git checkout <branch-name> or <commit-hash>
git pull (fixes detached HEAD issue)

== POSTGRES ==
pg_ctlcluster 15 main start|stop|status (may need to change 15 to 14, depending on the env)

-- Ubuntu --
sudo -i -u postgres
psql

-- Windows --
psql -U postgres

-- Create Database --
CREATE USER your_username WITH PASSWORD 'your_password';
CREATE DATABASE your_database_name;
GRANT ALL PRIVILEGES ON DATABASE your_database_name TO your_username;
\c your_database_name
GRANT ALL ON SCHEMA public TO your_username;

== PYTHON ==
python manage.py createsuperuser
python manage.py makemigrations
python manage.py migrate
python manage.py collectstatic --no-input

== GREEN UNICORN ==

-- Start (silently - linux only) --
gunicorn [PROJECT-NAME].wsgi:application --config gunicorn_config.py --daemon

-- Status --
ps aux | grep gunicorn

-- Kill --
pkill gunicorn

== NODE/WEBPACK/REACT ==
npm run webpack:dev
npm run webpack:stage

== NGINX ==
nginx -t
nginx -s reload

-- Maintenance Mode --
See actions/maintenance.sh

== DOCKER ==
docker build -f .Dockerfile -t [NAME-OF-IMAGE] .
docker run -p 80:80 -p 443:443 --name [NAME-OF-CONTAINER] [NAME-OF-IMAGE]
Attach shell

-- Snapshot --
docker ps
docker commit <container-id> image_name:tag

== FIREWALL (N/A to Docker) ==
# Enable UFW
sudo ufw enable

# Allow SSH (important to prevent lockout)
sudo ufw allow ssh

# Allow web traffic
sudo ufw allow 80/tcp
sudo ufw allow 443/tcp

# Explicitly deny port 8000 to prevent direct Gunicorn access
sudo ufw deny 8000

# Enable logging
sudo ufw logging on
